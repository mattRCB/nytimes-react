React is a front-end view framework. Views consist of multiple components, which are like functions which output html when they are called and given inputs. 

The inputs are called props, which one should consider an abbreviation of the word properties. React components are setup so there’s one top component which cause lower components to get rendered to the DOM/screen by calling them and passing a props object.

React is setup like an up-side-down tree with one top component.


A component accepts a single "props" object argument containing data and returns the page-ready html for a React element.

props are read-only objects 



Each component is like a function which will render html to the DOM/screen when called and passed props. Props is an object containing key:value pairs which the component can not change. When using JSX, the props.key can be wrapped in braces and included inline with html. When the component is called and passed a props object, each key will be replaced by its value in the rendered html. Since props are passed by the parent, the component being rendered can not alter the keys or values of its own props. Generally speaking, to change the values of its own props, the component in question would have to invoke a function which would attempt to replace the value in the state belonging to the parent from where the component in question was called.




To facilitate tying together changes and values (state) in different view components, React imbues every component with several event listeners, collectively known as the component lifecycle methods. These events and the functions a programmer attaches in them occur at specific moments in the process of components being called, rendered, updated and destroyed. So if the occurrence of some thing in one component should cause changes in other components, then the first component’s lifecycle methods can contain functions to cause changes in the other components, and so on. Thus events and state-changes are propagated “automatically” across components.


STATE

State is a property of react’s “component” class. It holds the values of a component’s inherent properties at the present time. It’s scope and permissions are limited to the component to which it belongs, i.e. a component can access its own state-property and not the state of other components. To provide a state property to a component, include this.state = { <something> } inside the component’s “constructor” property. Although “state” is considered an immutable property of an instance of the component class, the values held by state can be changed by using the this.setState({}) method. Using this method to change values in state ensures that React will re-render the component and the component lifecycle events will occur.

It is a common pattern in React that values held in the state of one component are passed as “props” when child components are called/rendered. Thus, data flows down from parent components to child components.